{"version":3,"file":"component---src-pages-reset-password-tsx-50dc421f97ffea1cf2ff.js","mappings":"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","sources":["webpack://medusa-admin/./node_modules/react-jwt/dist/index.modern.js","webpack://medusa-admin/./src/components/molecules/input-signin/index.tsx","webpack://medusa-admin/./src/components/templates/login-layout.tsx","webpack://medusa-admin/./src/pages/reset-password.tsx","webpack://medusa-admin/./src/utils/error-messages.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction decodeToken(token) {\n  try {\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    var payload = token.split(\".\")[1];\n    var padding = \"=\".repeat((4 - payload.length % 4) % 4);\n    var base64 = payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    var decoded = JSON.parse(atob(base64));\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction isTokenExpired(token) {\n  var decodedToken = decodeToken(token);\n  var result = true;\n\n  if (decodedToken && decodedToken.exp) {\n    var expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp);\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n\nfunction useJwt(userJwt) {\n  var _useState = useState(false),\n      isExpired = _useState[0],\n      setIsExpired = _useState[1];\n\n  var _useState2 = useState(null),\n      decodedToken = _useState2[0],\n      setDecodedToken = _useState2[1];\n\n  useEffect(function () {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  var evaluateToken = function evaluateToken(token) {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return {\n    isExpired: isExpired,\n    decodedToken: decodedToken,\n    reEvaluateToken: evaluateToken\n  };\n}\n\nexport { decodeToken, isTokenExpired as isExpired, useJwt };","import clsx from \"clsx\"\nimport React, {\n  ChangeEventHandler,\n  FocusEventHandler,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\"\nimport EyeIcon from \"../../fundamentals/icons/eye-icon\"\nimport EyeOffIcon from \"../../fundamentals/icons/eye-off-icon\"\nimport LockIcon from \"../../fundamentals/icons/lock-icon\"\n\ntype InputProps = React.InputHTMLAttributes<HTMLInputElement> & {\n  key?: string\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  onFocus?: FocusEventHandler<HTMLInputElement>\n  props?: React.HTMLAttributes<HTMLDivElement>\n}\n\nconst SigninInput = React.forwardRef(\n  (\n    {\n      placeholder,\n      name,\n      key,\n      required,\n      onChange,\n      onFocus,\n      className,\n      type,\n      ...props\n    }: InputProps,\n    ref\n  ) => {\n    const inputRef = useRef(null)\n    const [showPassword, setShowPassword] = useState(false)\n    const [inputType, setInputType] = useState(type)\n\n    useEffect(() => {\n      if (type === \"password\" && showPassword) {\n        setInputType(\"text\")\n      }\n\n      if (type === \"password\" && !showPassword) {\n        setInputType(\"password\")\n      }\n    }, [type, showPassword])\n\n    useImperativeHandle(ref, () => inputRef.current)\n\n    return (\n      <div\n        className={clsx(\n          \"w-[320px] h-[48px] mb-xsmall last:mb-0 border rounded-rounded overflow-hidden\",\n          \"bg-grey-5 inter-base-regular placeholder:text-grey-40\",\n          \"focus-within:shadow-input focus-within:border-violet-60\",\n          \"flex items-center\",\n          {\n            \"pointer-events-none focus-within:shadow-none focus-within:border-none text-grey-40\":\n              props.readOnly,\n          },\n          className\n        )}\n      >\n        {props.readOnly && (\n          <LockIcon size={16} className=\"text-grey-40 ml-base\" />\n        )}\n        <input\n          className={clsx(\n            \"outline-none outline-0 remove-number-spinner leading-base bg-transparent w-full py-3 px-4\",\n            {\n              \"pl-xsmall\": props.readOnly,\n            }\n          )}\n          ref={inputRef}\n          name={name}\n          key={key || name}\n          placeholder={placeholder || \"Placeholder\"}\n          onChange={onChange}\n          onFocus={onFocus}\n          type={inputType}\n          {...props}\n        />\n        {type === \"password\" && (\n          <button\n            type=\"button\"\n            onClick={() => setShowPassword(!showPassword)}\n            className=\"text-grey-40 px-4 focus:outline-none focus:text-violet-60\"\n          >\n            {showPassword ? <EyeIcon /> : <EyeOffIcon />}\n          </button>\n        )}\n      </div>\n    )\n  }\n)\n\nexport default SigninInput\n","import React from \"react\"\n\nconst LoginLayout = ({ children }) => {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <div className=\"grid grid-cols-1 grid-rows-1 min-h-screen\">\n        <div\n          className=\"flex flex-col items-center\"\n          style={{\n            background: \"linear-gradient(73.29deg, #7C53FF 0%, #F796FF 100%)\",\n          }}\n        >\n          {children}\n          <div className=\"text-grey-0 inter-base-regular pb-12\">\n            Â© Medusa Commerce <span>&#183;</span>{\" \"}\n            <a\n              style={{ color: \"inherit\", textDecoration: \"none\" }}\n              href=\"mailto:hello@medusajs.com\"\n            >\n              Contact\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LoginLayout\n","import { navigate } from \"gatsby\"\nimport { useAdminResetPassword } from \"medusa-react\"\nimport qs from \"qs\"\nimport React, { useEffect, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { decodeToken } from \"react-jwt\"\nimport Button from \"../components/fundamentals/button\"\nimport MedusaIcon from \"../components/fundamentals/icons/medusa-icon\"\nimport SigninInput from \"../components/molecules/input-signin\"\nimport SEO from \"../components/seo\"\nimport LoginLayout from \"../components/templates/login-layout\"\nimport { getErrorMessage } from \"../utils/error-messages\"\n\ntype formValues = {\n  password: string\n  repeat_password: string\n}\n\nconst ResetPasswordPage = ({ location }) => {\n  const parsed = qs.parse(location.search.substring(1))\n\n  let token: Object | null = null\n  if (parsed?.token) {\n    try {\n      token = decodeToken(parsed.token as string)\n    } catch (e) {\n      token = null\n    }\n  }\n\n  const [passwordMismatch, setPasswordMismatch] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [ready, setReady] = useState(false)\n  const email = token?.email || parsed?.email || \"\"\n\n  const { register, handleSubmit, formState } = useForm<formValues>({\n    defaultValues: {\n      password: \"\",\n      repeat_password: \"\",\n    },\n  })\n  const reset = useAdminResetPassword()\n\n  const handleAcceptInvite = (data: formValues) => {\n    setPasswordMismatch(false)\n    setError(null)\n\n    if (data.password !== data.repeat_password) {\n      setPasswordMismatch(true)\n      return\n    }\n\n    reset.mutate(\n      {\n        token: parsed.token as string,\n        password: data.password,\n        email: email,\n      },\n      {\n        onSuccess: () => {\n          navigate(\"/login\")\n        },\n        onError: (err) => {\n          setError(getErrorMessage(err))\n        },\n      }\n    )\n  }\n\n  useEffect(() => {\n    if (\n      formState.dirtyFields.password &&\n      formState.dirtyFields.repeat_password\n    ) {\n      setReady(true)\n    } else {\n      setReady(false)\n    }\n  }, [formState])\n\n  return (\n    <LoginLayout>\n      <SEO title=\"Reset Password\" />\n      <div className=\"flex h-full w-full items-center justify-center\">\n        <div className=\"flex min-h-[540px] bg-grey-0 rounded-rounded justify-center\">\n          <form\n            className=\"flex flex-col py-12 w-full px-[120px] items-center\"\n            onSubmit={handleSubmit(handleAcceptInvite)}\n          >\n            <MedusaIcon />\n            {!token ? (\n              <div className=\"h-full flex flex-col gap-y-2 text-center items-center justify-center\">\n                <span className=\"inter-large-semibold text-grey-90\">\n                  You reset link is invalid\n                </span>\n                <span className=\"inter-base-regular text-grey-50 mt-2\">\n                  Please try resetting your password again\n                </span>\n              </div>\n            ) : (\n              <>\n                <span className=\"inter-2xlarge-semibold mt-4 text-grey-90\">\n                  Reset your password\n                </span>\n                <span className=\"inter-base-regular text-grey-50 mt-2 mb-xlarge\">\n                  Choose a new password below ðð¼\n                </span>\n                <SigninInput\n                  placeholder=\"Email\"\n                  name=\"first_name\"\n                  value={email}\n                  readOnly\n                />\n                <SigninInput\n                  placeholder=\"Password\"\n                  type={\"password\"}\n                  name=\"password\"\n                  ref={register({ required: true })}\n                  autoComplete=\"new-password\"\n                />\n                <SigninInput\n                  placeholder=\"Confirm password\"\n                  type={\"password\"}\n                  name=\"repeat_password\"\n                  ref={register({ required: true })}\n                  autoComplete=\"new-password\"\n                  className=\"mb-0\"\n                />\n                {error && (\n                  <span className=\"text-rose-50 w-full mt-xsmall inter-small-regular\">\n                    The two passwords are not the same\n                  </span>\n                )}\n                {passwordMismatch && (\n                  <span className=\"text-rose-50 w-full mt-xsmall inter-small-regular\">\n                    The two passwords are not the same\n                  </span>\n                )}\n                <Button\n                  variant=\"primary\"\n                  size=\"large\"\n                  type=\"submit\"\n                  className=\"w-full mt-base rounded-rounded\"\n                  loading={formState.isSubmitting}\n                  disabled={!ready}\n                >\n                  Reset Password\n                </Button>\n              </>\n            )}\n          </form>\n        </div>\n      </div>\n    </LoginLayout>\n  )\n}\n\nexport default ResetPasswordPage\n","export const getErrorMessage = (error) => {\n  let msg = error?.response?.data?.message\n  if (msg[0].message) {\n    msg = msg[0].message\n  }\n  if (!msg) {\n    msg = \"Something went wrong, Please try again.\"\n  }\n  return msg\n}\n"],"names":["decodeToken","token","split","length","payload","padding","repeat","base64","replace","JSON","parse","atob","error","SigninInput","React","ref","placeholder","name","key","onChange","required","onFocus","className","type","props","inputRef","useRef","useState","showPassword","setShowPassword","inputType","setInputType","useEffect","useImperativeHandle","current","clsx","readOnly","LockIcon","size","onClick","EyeIcon","EyeOffIcon","children","style","background","color","textDecoration","href","location","parsed","qs","search","substring","e","passwordMismatch","setPasswordMismatch","setError","ready","setReady","email","useForm","defaultValues","password","repeat_password","register","handleSubmit","formState","reset","useAdminResetPassword","dirtyFields","LoginLayout","SEO","title","onSubmit","data","mutate","onSuccess","navigate","onError","err","getErrorMessage","MedusaIcon","value","autoComplete","Button","variant","loading","isSubmitting","disabled","msg","response","message"],"sourceRoot":""}